%%%% Starting test basic forks
Group begin: basic forks
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 9
  source-form: (test-equal #t (subprocess? (fork-and-exec (list "echo" "hello"))))
%%%% Starting test basic forks
Group begin: basic forks
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 9
  source-form: (test-equal #t (subprocess? (fork-and-exec (list "echo" "hello"))))
Test end:
  result-kind: pass
  actual-value: #t
  expected-value: #t
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 12
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "echo" "hello")))) (read-line (subprocess-stdout subproc))))
%%%% Starting test basic forks
Group begin: basic forks
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 9
  source-form: (test-equal #t (subprocess? (fork-and-exec (list "echo" "hello"))))
Test end:
  result-kind: pass
  actual-value: #t
  expected-value: #t
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 12
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "echo" "hello")))) (read-line (subprocess-stdout subproc))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 15
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "cat" "-")))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
%%%% Starting test basic forks
Group begin: basic forks
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 9
  source-form: (test-equal #t (subprocess? (fork-and-exec (list "echo" "hello"))))
Test end:
  result-kind: pass
  actual-value: #t
  expected-value: #t
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 12
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "echo" "hello")))) (read-line (subprocess-stdout subproc))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 15
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "cat" "-")))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 21
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (quote (cat -))))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
%%%% Starting test basic forks
Group begin: basic forks
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 9
  source-form: (test-equal #t (subprocess? (fork-and-exec (list "echo" "hello"))))
Test end:
  result-kind: pass
  actual-value: #t
  expected-value: #t
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 12
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "echo" "hello")))) (read-line (subprocess-stdout subproc))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 15
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "cat" "-")))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 21
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (quote (cat -))))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 28
  source-form: (test-equal "1 2 3" (with-opened-subprocess (fork-and-exec (quote (echo 1 2 3))) (lambda () (read-line))))
%%%% Starting test basic forks
Group begin: basic forks
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 9
  source-form: (test-equal #t (subprocess? (fork-and-exec (list "echo" "hello"))))
Test end:
  result-kind: pass
  actual-value: #t
  expected-value: #t
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 12
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "echo" "hello")))) (read-line (subprocess-stdout subproc))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 15
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "cat" "-")))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 21
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (quote (cat -))))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 28
  source-form: (test-equal "1 2 3" (with-opened-subprocess (fork-and-exec (quote (echo 1 2 3))) (lambda () (read-line))))
Test end:
  result-kind: pass
  actual-value: "1 2 3"
  expected-value: "1 2 3"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 33
  source-form: (test-equal "1 2 3 4 5 world" (with-opened-subprocess (fork-and-exec (quote ("echo" 1 2 3 "4" "5" world))) (lambda () (read-line))))
%%%% Starting test basic forks
Group begin: basic forks
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 9
  source-form: (test-equal #t (subprocess? (fork-and-exec (list "echo" "hello"))))
Test end:
  result-kind: pass
  actual-value: #t
  expected-value: #t
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 12
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "echo" "hello")))) (read-line (subprocess-stdout subproc))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 15
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "cat" "-")))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 21
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (quote (cat -))))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 28
  source-form: (test-equal "1 2 3" (with-opened-subprocess (fork-and-exec (quote (echo 1 2 3))) (lambda () (read-line))))
Test end:
  result-kind: pass
  actual-value: "1 2 3"
  expected-value: "1 2 3"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 33
  source-form: (test-equal "1 2 3 4 5 world" (with-opened-subprocess (fork-and-exec (quote ("echo" 1 2 3 "4" "5" world))) (lambda () (read-line))))
Test end:
  result-kind: pass
  actual-value: "1 2 3 4 5 world"
  expected-value: "1 2 3 4 5 world"
%%%% Starting test basic forks
Group begin: basic forks
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 9
  source-form: (test-equal #t (subprocess? (fork-and-exec (list "echo" "hello"))))
Test end:
  result-kind: pass
  actual-value: #t
  expected-value: #t
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 12
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "echo" "hello")))) (read-line (subprocess-stdout subproc))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 15
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "cat" "-")))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 21
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (quote (cat -))))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 28
  source-form: (test-equal "1 2 3" (with-opened-subprocess (fork-and-exec (quote (echo 1 2 3))) (lambda () (read-line))))
Test end:
  result-kind: pass
  actual-value: "1 2 3"
  expected-value: "1 2 3"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 33
  source-form: (test-equal "1 2 3 4 5 world" (with-opened-subprocess (fork-and-exec (quote ("echo" 1 2 3 "4" "5" world))) (lambda () (read-line))))
Test end:
  result-kind: pass
  actual-value: "1 2 3 4 5 world"
  expected-value: "1 2 3 4 5 world"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 46
  source-form: (test-equal "hello" (read-line))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
%%%% Starting test basic forks
Group begin: basic forks
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 9
  source-form: (test-equal #t (subprocess? (fork-and-exec (list "echo" "hello"))))
Test end:
  result-kind: pass
  actual-value: #t
  expected-value: #t
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 12
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "echo" "hello")))) (read-line (subprocess-stdout subproc))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 15
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (list "cat" "-")))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 21
  source-form: (test-equal "hello" (let ((subproc (fork-and-exec (quote (cat -))))) (begin (write-line "hello" (subprocess-stdin subproc)) (close-output-port (subprocess-stdin subproc)) (read-line (subprocess-stdout subproc)))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 28
  source-form: (test-equal "1 2 3" (with-opened-subprocess (fork-and-exec (quote (echo 1 2 3))) (lambda () (read-line))))
Test end:
  result-kind: pass
  actual-value: "1 2 3"
  expected-value: "1 2 3"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 33
  source-form: (test-equal "1 2 3 4 5 world" (with-opened-subprocess (fork-and-exec (quote ("echo" 1 2 3 "4" "5" world))) (lambda () (read-line))))
Test end:
  result-kind: pass
  actual-value: "1 2 3 4 5 world"
  expected-value: "1 2 3 4 5 world"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 46
  source-form: (test-equal "hello" (read-line))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/process-tests.scm"
  source-line: 65
  source-form: (test-equal "hello-world" (read-line))
Test end:
  result-kind: pass
  actual-value: "hello-world"
  expected-value: "hello-world"
Group end: basic forks
# of expected passes      8
