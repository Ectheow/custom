%%%% Starting test pipeline-tests
Group begin: pipeline-tests
Test begin:
  source-file: "custom/tests/pipeline-tests.scm"
  source-line: 8
  source-form: (test-equal #t (pipeline? (exec-pipe (quote ((echo hello) (cat -))) #f #f #f)))
Test end:
  result-kind: pass
  actual-value: #t
  expected-value: #t
Test begin:
  source-file: "custom/tests/pipeline-tests.scm"
  source-line: 11
  source-form: (test-equal "hello" (let ((pipeline (exec-pipe (quote ((echo hello) (cat -))) #f #f #f))) (flush-all-ports) (read-line (pipeline-stdout pipeline))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/pipeline-tests.scm"
  source-line: 16
  source-form: (test-equal "hello" (let ((pipeline (exec-pipe (quote ((echo hello) (cat -) (cat -) (cat -) (grep .*))) #f #f #f))) (flush-all-ports) (read-line (pipeline-stdout pipeline))))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/pipeline-tests.scm"
  source-line: 29
  source-form: (test-equal "hello" (read-line (pipeline-stdout thepipe)))
Test end:
  result-kind: pass
  actual-value: "hello"
  expected-value: "hello"
Test begin:
  source-file: "custom/tests/pipeline-tests.scm"
  source-line: 31
  source-form: (test-equal (length (pipeline-close thepipe)) 2)
Test end:
  result-kind: pass
  actual-value: 2
  expected-value: 2
Test begin:
  source-file: "custom/tests/pipeline-tests.scm"
  source-line: 41
  source-form: (test-equal 0 (status:exit-val (cdar exits)))
Test end:
  result-kind: pass
  actual-value: 0
  expected-value: 0
Test begin:
  source-file: "custom/tests/pipeline-tests.scm"
  source-line: 41
  source-form: (test-equal 0 (status:exit-val (cdar exits)))
Test end:
  result-kind: pass
  actual-value: 0
  expected-value: 0
Test begin:
  source-file: "custom/tests/pipeline-tests.scm"
  source-line: 41
  source-form: (test-equal 0 (status:exit-val (cdar exits)))
Test end:
  result-kind: pass
  actual-value: 0
  expected-value: 0
Test begin:
  source-file: "custom/tests/pipeline-tests.scm"
  source-line: 54
  source-form: (test-equal "hello, world" (begin (flush-all-ports) (read-line (pipeline-stdout pipeline))))
Test end:
  result-kind: fail
  actual-value: #<eof>
  expected-value: "hello, world"
Test begin:
  source-file: "custom/tests/pipeline-tests.scm"
  source-line: 75
  source-form: (test-equal "hello, world" (read-line input-port))
Test end:
  result-kind: pass
  actual-value: "hello, world"
  expected-value: "hello, world"
Group end: pipeline-tests
# of expected passes      9
# of unexpected failures  1
